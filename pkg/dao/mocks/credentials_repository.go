// Code generated by mockery v2.20.0. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/a-novel/auth-service/pkg/dao"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// CredentialsRepository is an autogenerated mock type for the CredentialsRepository type
type CredentialsRepository struct {
	mock.Mock
}

type CredentialsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CredentialsRepository) EXPECT() *CredentialsRepository_Expecter {
	return &CredentialsRepository_Expecter{mock: &_m.Mock}
}

// CancelNewEmail provides a mock function with given fields: ctx, id, now
func (_m *CredentialsRepository) CancelNewEmail(ctx context.Context, id uuid.UUID, now time.Time) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *dao.CredentialsModel); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_CancelNewEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelNewEmail'
type CredentialsRepository_CancelNewEmail_Call struct {
	*mock.Call
}

// CancelNewEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *CredentialsRepository_Expecter) CancelNewEmail(ctx interface{}, id interface{}, now interface{}) *CredentialsRepository_CancelNewEmail_Call {
	return &CredentialsRepository_CancelNewEmail_Call{Call: _e.mock.On("CancelNewEmail", ctx, id, now)}
}

func (_c *CredentialsRepository_CancelNewEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *CredentialsRepository_CancelNewEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *CredentialsRepository_CancelNewEmail_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_CancelNewEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_CancelNewEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time) (*dao.CredentialsModel, error)) *CredentialsRepository_CancelNewEmail_Call {
	_c.Call.Return(run)
	return _c
}

// EmailExists provides a mock function with given fields: ctx, email
func (_m *CredentialsRepository) EmailExists(ctx context.Context, email dao.Email) (bool, error) {
	ret := _m.Called(ctx, email)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.Email) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.Email) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.Email) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_EmailExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmailExists'
type CredentialsRepository_EmailExists_Call struct {
	*mock.Call
}

// EmailExists is a helper method to define mock.On call
//   - ctx context.Context
//   - email dao.Email
func (_e *CredentialsRepository_Expecter) EmailExists(ctx interface{}, email interface{}) *CredentialsRepository_EmailExists_Call {
	return &CredentialsRepository_EmailExists_Call{Call: _e.mock.On("EmailExists", ctx, email)}
}

func (_c *CredentialsRepository_EmailExists_Call) Run(run func(ctx context.Context, email dao.Email)) *CredentialsRepository_EmailExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.Email))
	})
	return _c
}

func (_c *CredentialsRepository_EmailExists_Call) Return(_a0 bool, _a1 error) *CredentialsRepository_EmailExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_EmailExists_Call) RunAndReturn(run func(context.Context, dao.Email) (bool, error)) *CredentialsRepository_EmailExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentials provides a mock function with given fields: ctx, id
func (_m *CredentialsRepository) GetCredentials(ctx context.Context, id uuid.UUID) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, id)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.CredentialsModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type CredentialsRepository_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *CredentialsRepository_Expecter) GetCredentials(ctx interface{}, id interface{}) *CredentialsRepository_GetCredentials_Call {
	return &CredentialsRepository_GetCredentials_Call{Call: _e.mock.On("GetCredentials", ctx, id)}
}

func (_c *CredentialsRepository_GetCredentials_Call) Run(run func(ctx context.Context, id uuid.UUID)) *CredentialsRepository_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CredentialsRepository_GetCredentials_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_GetCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_GetCredentials_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dao.CredentialsModel, error)) *CredentialsRepository_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentialsByEmail provides a mock function with given fields: ctx, email
func (_m *CredentialsRepository) GetCredentialsByEmail(ctx context.Context, email dao.Email) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, email)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.Email) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.Email) *dao.CredentialsModel); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.Email) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_GetCredentialsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentialsByEmail'
type CredentialsRepository_GetCredentialsByEmail_Call struct {
	*mock.Call
}

// GetCredentialsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email dao.Email
func (_e *CredentialsRepository_Expecter) GetCredentialsByEmail(ctx interface{}, email interface{}) *CredentialsRepository_GetCredentialsByEmail_Call {
	return &CredentialsRepository_GetCredentialsByEmail_Call{Call: _e.mock.On("GetCredentialsByEmail", ctx, email)}
}

func (_c *CredentialsRepository_GetCredentialsByEmail_Call) Run(run func(ctx context.Context, email dao.Email)) *CredentialsRepository_GetCredentialsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.Email))
	})
	return _c
}

func (_c *CredentialsRepository_GetCredentialsByEmail_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_GetCredentialsByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_GetCredentialsByEmail_Call) RunAndReturn(run func(context.Context, dao.Email) (*dao.CredentialsModel, error)) *CredentialsRepository_GetCredentialsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, code, email, now
func (_m *CredentialsRepository) ResetPassword(ctx context.Context, code string, email dao.Email, now time.Time) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, code, email, now)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, dao.Email, time.Time) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, code, email, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, dao.Email, time.Time) *dao.CredentialsModel); ok {
		r0 = rf(ctx, code, email, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, dao.Email, time.Time) error); ok {
		r1 = rf(ctx, code, email, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type CredentialsRepository_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - email dao.Email
//   - now time.Time
func (_e *CredentialsRepository_Expecter) ResetPassword(ctx interface{}, code interface{}, email interface{}, now interface{}) *CredentialsRepository_ResetPassword_Call {
	return &CredentialsRepository_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, code, email, now)}
}

func (_c *CredentialsRepository_ResetPassword_Call) Run(run func(ctx context.Context, code string, email dao.Email, now time.Time)) *CredentialsRepository_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(dao.Email), args[3].(time.Time))
	})
	return _c
}

func (_c *CredentialsRepository_ResetPassword_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_ResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_ResetPassword_Call) RunAndReturn(run func(context.Context, string, dao.Email, time.Time) (*dao.CredentialsModel, error)) *CredentialsRepository_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmail provides a mock function with given fields: ctx, email, code, id, now
func (_m *CredentialsRepository) UpdateEmail(ctx context.Context, email dao.Email, code string, id uuid.UUID, now time.Time) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, email, code, id, now)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.Email, string, uuid.UUID, time.Time) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, email, code, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.Email, string, uuid.UUID, time.Time) *dao.CredentialsModel); ok {
		r0 = rf(ctx, email, code, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.Email, string, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, email, code, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type CredentialsRepository_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email dao.Email
//   - code string
//   - id uuid.UUID
//   - now time.Time
func (_e *CredentialsRepository_Expecter) UpdateEmail(ctx interface{}, email interface{}, code interface{}, id interface{}, now interface{}) *CredentialsRepository_UpdateEmail_Call {
	return &CredentialsRepository_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, email, code, id, now)}
}

func (_c *CredentialsRepository_UpdateEmail_Call) Run(run func(ctx context.Context, email dao.Email, code string, id uuid.UUID, now time.Time)) *CredentialsRepository_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.Email), args[2].(string), args[3].(uuid.UUID), args[4].(time.Time))
	})
	return _c
}

func (_c *CredentialsRepository_UpdateEmail_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_UpdateEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_UpdateEmail_Call) RunAndReturn(run func(context.Context, dao.Email, string, uuid.UUID, time.Time) (*dao.CredentialsModel, error)) *CredentialsRepository_UpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmailValidation provides a mock function with given fields: ctx, code, id, now
func (_m *CredentialsRepository) UpdateEmailValidation(ctx context.Context, code string, id uuid.UUID, now time.Time) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, code, id, now)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, code, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) *dao.CredentialsModel); ok {
		r0 = rf(ctx, code, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, code, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_UpdateEmailValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmailValidation'
type CredentialsRepository_UpdateEmailValidation_Call struct {
	*mock.Call
}

// UpdateEmailValidation is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - id uuid.UUID
//   - now time.Time
func (_e *CredentialsRepository_Expecter) UpdateEmailValidation(ctx interface{}, code interface{}, id interface{}, now interface{}) *CredentialsRepository_UpdateEmailValidation_Call {
	return &CredentialsRepository_UpdateEmailValidation_Call{Call: _e.mock.On("UpdateEmailValidation", ctx, code, id, now)}
}

func (_c *CredentialsRepository_UpdateEmailValidation_Call) Run(run func(ctx context.Context, code string, id uuid.UUID, now time.Time)) *CredentialsRepository_UpdateEmailValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *CredentialsRepository_UpdateEmailValidation_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_UpdateEmailValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_UpdateEmailValidation_Call) RunAndReturn(run func(context.Context, string, uuid.UUID, time.Time) (*dao.CredentialsModel, error)) *CredentialsRepository_UpdateEmailValidation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNewEmailValidation provides a mock function with given fields: ctx, code, id, now
func (_m *CredentialsRepository) UpdateNewEmailValidation(ctx context.Context, code string, id uuid.UUID, now time.Time) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, code, id, now)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, code, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) *dao.CredentialsModel); ok {
		r0 = rf(ctx, code, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, code, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_UpdateNewEmailValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNewEmailValidation'
type CredentialsRepository_UpdateNewEmailValidation_Call struct {
	*mock.Call
}

// UpdateNewEmailValidation is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - id uuid.UUID
//   - now time.Time
func (_e *CredentialsRepository_Expecter) UpdateNewEmailValidation(ctx interface{}, code interface{}, id interface{}, now interface{}) *CredentialsRepository_UpdateNewEmailValidation_Call {
	return &CredentialsRepository_UpdateNewEmailValidation_Call{Call: _e.mock.On("UpdateNewEmailValidation", ctx, code, id, now)}
}

func (_c *CredentialsRepository_UpdateNewEmailValidation_Call) Run(run func(ctx context.Context, code string, id uuid.UUID, now time.Time)) *CredentialsRepository_UpdateNewEmailValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *CredentialsRepository_UpdateNewEmailValidation_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_UpdateNewEmailValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_UpdateNewEmailValidation_Call) RunAndReturn(run func(context.Context, string, uuid.UUID, time.Time) (*dao.CredentialsModel, error)) *CredentialsRepository_UpdateNewEmailValidation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, newPassword, id, now
func (_m *CredentialsRepository) UpdatePassword(ctx context.Context, newPassword string, id uuid.UUID, now time.Time) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, newPassword, id, now)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, newPassword, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) *dao.CredentialsModel); ok {
		r0 = rf(ctx, newPassword, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, newPassword, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type CredentialsRepository_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - newPassword string
//   - id uuid.UUID
//   - now time.Time
func (_e *CredentialsRepository_Expecter) UpdatePassword(ctx interface{}, newPassword interface{}, id interface{}, now interface{}) *CredentialsRepository_UpdatePassword_Call {
	return &CredentialsRepository_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, newPassword, id, now)}
}

func (_c *CredentialsRepository_UpdatePassword_Call) Run(run func(ctx context.Context, newPassword string, id uuid.UUID, now time.Time)) *CredentialsRepository_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *CredentialsRepository_UpdatePassword_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_UpdatePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_UpdatePassword_Call) RunAndReturn(run func(context.Context, string, uuid.UUID, time.Time) (*dao.CredentialsModel, error)) *CredentialsRepository_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateEmail provides a mock function with given fields: ctx, id, now
func (_m *CredentialsRepository) ValidateEmail(ctx context.Context, id uuid.UUID, now time.Time) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *dao.CredentialsModel); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_ValidateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEmail'
type CredentialsRepository_ValidateEmail_Call struct {
	*mock.Call
}

// ValidateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *CredentialsRepository_Expecter) ValidateEmail(ctx interface{}, id interface{}, now interface{}) *CredentialsRepository_ValidateEmail_Call {
	return &CredentialsRepository_ValidateEmail_Call{Call: _e.mock.On("ValidateEmail", ctx, id, now)}
}

func (_c *CredentialsRepository_ValidateEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *CredentialsRepository_ValidateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *CredentialsRepository_ValidateEmail_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_ValidateEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_ValidateEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time) (*dao.CredentialsModel, error)) *CredentialsRepository_ValidateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateNewEmail provides a mock function with given fields: ctx, id, now
func (_m *CredentialsRepository) ValidateNewEmail(ctx context.Context, id uuid.UUID, now time.Time) (*dao.CredentialsModel, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *dao.CredentialsModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (*dao.CredentialsModel, error)); ok {
		return rf(ctx, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *dao.CredentialsModel); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CredentialsRepository_ValidateNewEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateNewEmail'
type CredentialsRepository_ValidateNewEmail_Call struct {
	*mock.Call
}

// ValidateNewEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *CredentialsRepository_Expecter) ValidateNewEmail(ctx interface{}, id interface{}, now interface{}) *CredentialsRepository_ValidateNewEmail_Call {
	return &CredentialsRepository_ValidateNewEmail_Call{Call: _e.mock.On("ValidateNewEmail", ctx, id, now)}
}

func (_c *CredentialsRepository_ValidateNewEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *CredentialsRepository_ValidateNewEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *CredentialsRepository_ValidateNewEmail_Call) Return(_a0 *dao.CredentialsModel, _a1 error) *CredentialsRepository_ValidateNewEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CredentialsRepository_ValidateNewEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time) (*dao.CredentialsModel, error)) *CredentialsRepository_ValidateNewEmail_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCredentialsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCredentialsRepository creates a new instance of CredentialsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCredentialsRepository(t mockConstructorTestingTNewCredentialsRepository) *CredentialsRepository {
	mock := &CredentialsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
