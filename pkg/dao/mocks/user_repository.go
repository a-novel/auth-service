// Code generated by mockery v2.20.0. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/a-novel/auth-service/pkg/dao"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data, id, now
func (_m *UserRepository) Create(ctx context.Context, data *dao.UserModelCore, id uuid.UUID, now time.Time) (*dao.UserModel, error) {
	ret := _m.Called(ctx, data, id, now)

	var r0 *dao.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dao.UserModelCore, uuid.UUID, time.Time) (*dao.UserModel, error)); ok {
		return rf(ctx, data, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dao.UserModelCore, uuid.UUID, time.Time) *dao.UserModel); ok {
		r0 = rf(ctx, data, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dao.UserModelCore, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, data, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data *dao.UserModelCore
//   - id uuid.UUID
//   - now time.Time
func (_e *UserRepository_Expecter) Create(ctx interface{}, data interface{}, id interface{}, now interface{}) *UserRepository_Create_Call {
	return &UserRepository_Create_Call{Call: _e.mock.On("Create", ctx, data, id, now)}
}

func (_c *UserRepository_Create_Call) Run(run func(ctx context.Context, data *dao.UserModelCore, id uuid.UUID, now time.Time)) *UserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dao.UserModelCore), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *UserRepository_Create_Call) Return(_a0 *dao.UserModel, _a1 error) *UserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_Create_Call) RunAndReturn(run func(context.Context, *dao.UserModelCore, uuid.UUID, time.Time) (*dao.UserModel, error)) *UserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, ids
func (_m *UserRepository) List(ctx context.Context, ids []uuid.UUID) ([]*dao.UserModel, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*dao.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*dao.UserModel, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*dao.UserModel); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type UserRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *UserRepository_Expecter) List(ctx interface{}, ids interface{}) *UserRepository_List_Call {
	return &UserRepository_List_Call{Call: _e.mock.On("List", ctx, ids)}
}

func (_c *UserRepository_List_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *UserRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *UserRepository_List_Call) Return(_a0 []*dao.UserModel, _a1 error) *UserRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_List_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*dao.UserModel, error)) *UserRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, query, limit, offset
func (_m *UserRepository) Search(ctx context.Context, query string, limit int, offset int) ([]*dao.UserModel, int, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []*dao.UserModel
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*dao.UserModel, int, error)); ok {
		return rf(ctx, query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*dao.UserModel); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, query, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type UserRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - limit int
//   - offset int
func (_e *UserRepository_Expecter) Search(ctx interface{}, query interface{}, limit interface{}, offset interface{}) *UserRepository_Search_Call {
	return &UserRepository_Search_Call{Call: _e.mock.On("Search", ctx, query, limit, offset)}
}

func (_c *UserRepository_Search_Call) Run(run func(ctx context.Context, query string, limit int, offset int)) *UserRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *UserRepository_Search_Call) Return(_a0 []*dao.UserModel, _a1 int, _a2 error) *UserRepository_Search_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserRepository_Search_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*dao.UserModel, int, error)) *UserRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
