// Code generated by mockery v2.20.0. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/a-novel/auth-service/pkg/dao"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// IdentityRepository is an autogenerated mock type for the IdentityRepository type
type IdentityRepository struct {
	mock.Mock
}

type IdentityRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IdentityRepository) EXPECT() *IdentityRepository_Expecter {
	return &IdentityRepository_Expecter{mock: &_m.Mock}
}

// GetIdentity provides a mock function with given fields: ctx, id
func (_m *IdentityRepository) GetIdentity(ctx context.Context, id uuid.UUID) (*dao.IdentityModel, error) {
	ret := _m.Called(ctx, id)

	var r0 *dao.IdentityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.IdentityModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.IdentityModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.IdentityModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentityRepository_GetIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentity'
type IdentityRepository_GetIdentity_Call struct {
	*mock.Call
}

// GetIdentity is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *IdentityRepository_Expecter) GetIdentity(ctx interface{}, id interface{}) *IdentityRepository_GetIdentity_Call {
	return &IdentityRepository_GetIdentity_Call{Call: _e.mock.On("GetIdentity", ctx, id)}
}

func (_c *IdentityRepository_GetIdentity_Call) Run(run func(ctx context.Context, id uuid.UUID)) *IdentityRepository_GetIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *IdentityRepository_GetIdentity_Call) Return(_a0 *dao.IdentityModel, _a1 error) *IdentityRepository_GetIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IdentityRepository_GetIdentity_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dao.IdentityModel, error)) *IdentityRepository_GetIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data, id, now
func (_m *IdentityRepository) Update(ctx context.Context, data *dao.IdentityModelCore, id uuid.UUID, now time.Time) (*dao.IdentityModel, error) {
	ret := _m.Called(ctx, data, id, now)

	var r0 *dao.IdentityModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dao.IdentityModelCore, uuid.UUID, time.Time) (*dao.IdentityModel, error)); ok {
		return rf(ctx, data, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dao.IdentityModelCore, uuid.UUID, time.Time) *dao.IdentityModel); ok {
		r0 = rf(ctx, data, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.IdentityModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dao.IdentityModelCore, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, data, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentityRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IdentityRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data *dao.IdentityModelCore
//   - id uuid.UUID
//   - now time.Time
func (_e *IdentityRepository_Expecter) Update(ctx interface{}, data interface{}, id interface{}, now interface{}) *IdentityRepository_Update_Call {
	return &IdentityRepository_Update_Call{Call: _e.mock.On("Update", ctx, data, id, now)}
}

func (_c *IdentityRepository_Update_Call) Run(run func(ctx context.Context, data *dao.IdentityModelCore, id uuid.UUID, now time.Time)) *IdentityRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dao.IdentityModelCore), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *IdentityRepository_Update_Call) Return(_a0 *dao.IdentityModel, _a1 error) *IdentityRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IdentityRepository_Update_Call) RunAndReturn(run func(context.Context, *dao.IdentityModelCore, uuid.UUID, time.Time) (*dao.IdentityModel, error)) *IdentityRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIdentityRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIdentityRepository creates a new instance of IdentityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIdentityRepository(t mockConstructorTestingTNewIdentityRepository) *IdentityRepository {
	mock := &IdentityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
