// Code generated by mockery v2.33.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/a-novel/auth-service/pkg/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UpdateIdentityService is an autogenerated mock type for the UpdateIdentityService type
type UpdateIdentityService struct {
	mock.Mock
}

type UpdateIdentityService_Expecter struct {
	mock *mock.Mock
}

func (_m *UpdateIdentityService) EXPECT() *UpdateIdentityService_Expecter {
	return &UpdateIdentityService_Expecter{mock: &_m.Mock}
}

// UpdateIdentity provides a mock function with given fields: ctx, tokenRaw, now, form
func (_m *UpdateIdentityService) UpdateIdentity(ctx context.Context, tokenRaw string, now time.Time, form models.UpdateIdentityForm) error {
	ret := _m.Called(ctx, tokenRaw, now, form)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, models.UpdateIdentityForm) error); ok {
		r0 = rf(ctx, tokenRaw, now, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIdentityService_UpdateIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIdentity'
type UpdateIdentityService_UpdateIdentity_Call struct {
	*mock.Call
}

// UpdateIdentity is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenRaw string
//   - now time.Time
//   - form models.UpdateIdentityForm
func (_e *UpdateIdentityService_Expecter) UpdateIdentity(ctx interface{}, tokenRaw interface{}, now interface{}, form interface{}) *UpdateIdentityService_UpdateIdentity_Call {
	return &UpdateIdentityService_UpdateIdentity_Call{Call: _e.mock.On("UpdateIdentity", ctx, tokenRaw, now, form)}
}

func (_c *UpdateIdentityService_UpdateIdentity_Call) Run(run func(ctx context.Context, tokenRaw string, now time.Time, form models.UpdateIdentityForm)) *UpdateIdentityService_UpdateIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(models.UpdateIdentityForm))
	})
	return _c
}

func (_c *UpdateIdentityService_UpdateIdentity_Call) Return(_a0 error) *UpdateIdentityService_UpdateIdentity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UpdateIdentityService_UpdateIdentity_Call) RunAndReturn(run func(context.Context, string, time.Time, models.UpdateIdentityForm) error) *UpdateIdentityService_UpdateIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// NewUpdateIdentityService creates a new instance of UpdateIdentityService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateIdentityService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateIdentityService {
	mock := &UpdateIdentityService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
