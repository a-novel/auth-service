// Code generated by mockery v2.20.0. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/a-novel/auth-service/pkg/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IntrospectTokenService is an autogenerated mock type for the IntrospectTokenService type
type IntrospectTokenService struct {
	mock.Mock
}

type IntrospectTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *IntrospectTokenService) EXPECT() *IntrospectTokenService_Expecter {
	return &IntrospectTokenService_Expecter{mock: &_m.Mock}
}

// IntrospectToken provides a mock function with given fields: ctx, token, now, autoRefresh
func (_m *IntrospectTokenService) IntrospectToken(ctx context.Context, token string, now time.Time, autoRefresh bool) (*models.UserTokenStatus, error) {
	ret := _m.Called(ctx, token, now, autoRefresh)

	var r0 *models.UserTokenStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, bool) (*models.UserTokenStatus, error)); ok {
		return rf(ctx, token, now, autoRefresh)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, bool) *models.UserTokenStatus); ok {
		r0 = rf(ctx, token, now, autoRefresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserTokenStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, bool) error); ok {
		r1 = rf(ctx, token, now, autoRefresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntrospectTokenService_IntrospectToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IntrospectToken'
type IntrospectTokenService_IntrospectToken_Call struct {
	*mock.Call
}

// IntrospectToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - now time.Time
//   - autoRefresh bool
func (_e *IntrospectTokenService_Expecter) IntrospectToken(ctx interface{}, token interface{}, now interface{}, autoRefresh interface{}) *IntrospectTokenService_IntrospectToken_Call {
	return &IntrospectTokenService_IntrospectToken_Call{Call: _e.mock.On("IntrospectToken", ctx, token, now, autoRefresh)}
}

func (_c *IntrospectTokenService_IntrospectToken_Call) Run(run func(ctx context.Context, token string, now time.Time, autoRefresh bool)) *IntrospectTokenService_IntrospectToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(bool))
	})
	return _c
}

func (_c *IntrospectTokenService_IntrospectToken_Call) Return(_a0 *models.UserTokenStatus, _a1 error) *IntrospectTokenService_IntrospectToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IntrospectTokenService_IntrospectToken_Call) RunAndReturn(run func(context.Context, string, time.Time, bool) (*models.UserTokenStatus, error)) *IntrospectTokenService_IntrospectToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIntrospectTokenService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIntrospectTokenService creates a new instance of IntrospectTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIntrospectTokenService(t mockConstructorTestingTNewIntrospectTokenService) *IntrospectTokenService {
	mock := &IntrospectTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
