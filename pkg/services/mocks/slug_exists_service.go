// Code generated by mockery v2.20.0. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SlugExistsService is an autogenerated mock type for the SlugExistsService type
type SlugExistsService struct {
	mock.Mock
}

type SlugExistsService_Expecter struct {
	mock *mock.Mock
}

func (_m *SlugExistsService) EXPECT() *SlugExistsService_Expecter {
	return &SlugExistsService_Expecter{mock: &_m.Mock}
}

// SlugExists provides a mock function with given fields: ctx, slug
func (_m *SlugExistsService) SlugExists(ctx context.Context, slug string) (bool, error) {
	ret := _m.Called(ctx, slug)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlugExistsService_SlugExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlugExists'
type SlugExistsService_SlugExists_Call struct {
	*mock.Call
}

// SlugExists is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *SlugExistsService_Expecter) SlugExists(ctx interface{}, slug interface{}) *SlugExistsService_SlugExists_Call {
	return &SlugExistsService_SlugExists_Call{Call: _e.mock.On("SlugExists", ctx, slug)}
}

func (_c *SlugExistsService_SlugExists_Call) Run(run func(ctx context.Context, slug string)) *SlugExistsService_SlugExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SlugExistsService_SlugExists_Call) Return(_a0 bool, _a1 error) *SlugExistsService_SlugExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SlugExistsService_SlugExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *SlugExistsService_SlugExists_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSlugExistsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSlugExistsService creates a new instance of SlugExistsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlugExistsService(t mockConstructorTestingTNewSlugExistsService) *SlugExistsService {
	mock := &SlugExistsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
