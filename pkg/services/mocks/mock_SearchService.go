// Code generated by mockery v2.33.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/a-novel/auth-service/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// SearchService is an autogenerated mock type for the SearchService type
type SearchService struct {
	mock.Mock
}

type SearchService_Expecter struct {
	mock *mock.Mock
}

func (_m *SearchService) EXPECT() *SearchService_Expecter {
	return &SearchService_Expecter{mock: &_m.Mock}
}

// Search provides a mock function with given fields: ctx, query, limit, offset
func (_m *SearchService) Search(ctx context.Context, query string, limit int, offset int) ([]*models.UserPreview, int, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []*models.UserPreview
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.UserPreview, int, error)); ok {
		return rf(ctx, query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.UserPreview); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, query, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type SearchService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - limit int
//   - offset int
func (_e *SearchService_Expecter) Search(ctx interface{}, query interface{}, limit interface{}, offset interface{}) *SearchService_Search_Call {
	return &SearchService_Search_Call{Call: _e.mock.On("Search", ctx, query, limit, offset)}
}

func (_c *SearchService_Search_Call) Run(run func(ctx context.Context, query string, limit int, offset int)) *SearchService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *SearchService_Search_Call) Return(_a0 []*models.UserPreview, _a1 int, _a2 error) *SearchService_Search_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SearchService_Search_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*models.UserPreview, int, error)) *SearchService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewSearchService creates a new instance of SearchService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSearchService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SearchService {
	mock := &SearchService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
