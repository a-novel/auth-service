// Code generated by mockery v2.20.0. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/a-novel/auth-service/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// PreviewService is an autogenerated mock type for the PreviewService type
type PreviewService struct {
	mock.Mock
}

type PreviewService_Expecter struct {
	mock *mock.Mock
}

func (_m *PreviewService) EXPECT() *PreviewService_Expecter {
	return &PreviewService_Expecter{mock: &_m.Mock}
}

// Preview provides a mock function with given fields: ctx, slug
func (_m *PreviewService) Preview(ctx context.Context, slug string) (*models.UserPreview, error) {
	ret := _m.Called(ctx, slug)

	var r0 *models.UserPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserPreview, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserPreview); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreviewService_Preview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preview'
type PreviewService_Preview_Call struct {
	*mock.Call
}

// Preview is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *PreviewService_Expecter) Preview(ctx interface{}, slug interface{}) *PreviewService_Preview_Call {
	return &PreviewService_Preview_Call{Call: _e.mock.On("Preview", ctx, slug)}
}

func (_c *PreviewService_Preview_Call) Run(run func(ctx context.Context, slug string)) *PreviewService_Preview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PreviewService_Preview_Call) Return(_a0 *models.UserPreview, _a1 error) *PreviewService_Preview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PreviewService_Preview_Call) RunAndReturn(run func(context.Context, string) (*models.UserPreview, error)) *PreviewService_Preview_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPreviewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPreviewService creates a new instance of PreviewService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPreviewService(t mockConstructorTestingTNewPreviewService) *PreviewService {
	mock := &PreviewService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
