// Code generated by mockery v2.33.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/a-novel/auth-service/pkg/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RegisterService is an autogenerated mock type for the RegisterService type
type RegisterService struct {
	mock.Mock
}

type RegisterService_Expecter struct {
	mock *mock.Mock
}

func (_m *RegisterService) EXPECT() *RegisterService_Expecter {
	return &RegisterService_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: ctx, form, now
func (_m *RegisterService) Register(ctx context.Context, form models.RegisterForm, now time.Time) (*models.UserTokenStatus, func() error, error) {
	ret := _m.Called(ctx, form, now)

	var r0 *models.UserTokenStatus
	var r1 func() error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.RegisterForm, time.Time) (*models.UserTokenStatus, func() error, error)); ok {
		return rf(ctx, form, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.RegisterForm, time.Time) *models.UserTokenStatus); ok {
		r0 = rf(ctx, form, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserTokenStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.RegisterForm, time.Time) func() error); ok {
		r1 = rf(ctx, form, now)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.RegisterForm, time.Time) error); ok {
		r2 = rf(ctx, form, now)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RegisterService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type RegisterService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - form models.RegisterForm
//   - now time.Time
func (_e *RegisterService_Expecter) Register(ctx interface{}, form interface{}, now interface{}) *RegisterService_Register_Call {
	return &RegisterService_Register_Call{Call: _e.mock.On("Register", ctx, form, now)}
}

func (_c *RegisterService_Register_Call) Run(run func(ctx context.Context, form models.RegisterForm, now time.Time)) *RegisterService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.RegisterForm), args[2].(time.Time))
	})
	return _c
}

func (_c *RegisterService_Register_Call) Return(_a0 *models.UserTokenStatus, _a1 func() error, _a2 error) *RegisterService_Register_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RegisterService_Register_Call) RunAndReturn(run func(context.Context, models.RegisterForm, time.Time) (*models.UserTokenStatus, func() error, error)) *RegisterService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegisterService creates a new instance of RegisterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegisterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegisterService {
	mock := &RegisterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
