// Code generated by mockery v2.20.0. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CancelNewEmailService is an autogenerated mock type for the CancelNewEmailService type
type CancelNewEmailService struct {
	mock.Mock
}

type CancelNewEmailService_Expecter struct {
	mock *mock.Mock
}

func (_m *CancelNewEmailService) EXPECT() *CancelNewEmailService_Expecter {
	return &CancelNewEmailService_Expecter{mock: &_m.Mock}
}

// CancelNewEmail provides a mock function with given fields: ctx, tokenRaw, now
func (_m *CancelNewEmailService) CancelNewEmail(ctx context.Context, tokenRaw string, now time.Time) error {
	ret := _m.Called(ctx, tokenRaw, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, tokenRaw, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelNewEmailService_CancelNewEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelNewEmail'
type CancelNewEmailService_CancelNewEmail_Call struct {
	*mock.Call
}

// CancelNewEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenRaw string
//   - now time.Time
func (_e *CancelNewEmailService_Expecter) CancelNewEmail(ctx interface{}, tokenRaw interface{}, now interface{}) *CancelNewEmailService_CancelNewEmail_Call {
	return &CancelNewEmailService_CancelNewEmail_Call{Call: _e.mock.On("CancelNewEmail", ctx, tokenRaw, now)}
}

func (_c *CancelNewEmailService_CancelNewEmail_Call) Run(run func(ctx context.Context, tokenRaw string, now time.Time)) *CancelNewEmailService_CancelNewEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *CancelNewEmailService_CancelNewEmail_Call) Return(_a0 error) *CancelNewEmailService_CancelNewEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CancelNewEmailService_CancelNewEmail_Call) RunAndReturn(run func(context.Context, string, time.Time) error) *CancelNewEmailService_CancelNewEmail_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCancelNewEmailService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCancelNewEmailService creates a new instance of CancelNewEmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCancelNewEmailService(t mockConstructorTestingTNewCancelNewEmailService) *CancelNewEmailService {
	mock := &CancelNewEmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
